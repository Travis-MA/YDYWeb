/**
 * DIS
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateAppRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateAppRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.Dis) {
      root.Dis = {};
    }
    root.Dis.AppApi = factory(root.Dis.ApiClient, root.Dis.CreateAppRequest);
  }
}(this, function(ApiClient, CreateAppRequest) {
  'use strict';

  /**
   * App service.
   * @module api/AppApi
   * @version 1.3.0
   */

  /**
   * Constructs a new AppApi. 
   * @alias module:api/AppApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createApp operation.
     * @callback module:api/AppApi~createAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creating a Consumer Application
     * This API is used to create a consumer application.
     * @param {String} projectId ID of the current Project
     * @param {module:model/CreateAppRequest} createAppRequest createAppRequest
     * @param {module:api/AppApi~createAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createApp = function(projectId, createAppRequest, callback) {
      var postBody = createAppRequest;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createApp");
      }

      // verify the required parameter 'createAppRequest' is set
      if (createAppRequest === undefined || createAppRequest === null) {
        throw new Error("Missing the required parameter 'createAppRequest' when calling createApp");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['authorization', 'x-sdk-date'];
      var contentTypes = ['application/json; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{project_id}/apps', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApp operation.
     * @callback module:api/AppApi~deleteAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deleting a Consumer Application
     * This API is used to delete an application.
     * @param {String} projectId ID of the current Project
     * @param {String} appName Unique name of the consumer application that will read data from the chosen DIS stream.
     * @param {module:api/AppApi~deleteAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteApp = function(projectId, appName, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteApp");
      }

      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling deleteApp");
      }


      var pathParams = {
        'project_id': projectId,
        'app_name': appName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['authorization', 'x-sdk-date'];
      var contentTypes = ['application/json; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{project_id}/apps/{app_name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
