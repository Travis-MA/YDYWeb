/**
 * DIS
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CommitCheckpointRequest', 'model/GetCheckpointResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CommitCheckpointRequest'), require('../model/GetCheckpointResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Dis) {
      root.Dis = {};
    }
    root.Dis.CheckpointApi = factory(root.Dis.ApiClient, root.Dis.CommitCheckpointRequest, root.Dis.GetCheckpointResult);
  }
}(this, function(ApiClient, CommitCheckpointRequest, GetCheckpointResult) {
  'use strict';

  /**
   * Checkpoint service.
   * @module api/CheckpointApi
   * @version 1.3.0
   */

  /**
   * Constructs a new CheckpointApi. 
   * @alias module:api/CheckpointApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the commitCheckpoint operation.
     * @callback module:api/CheckpointApi~commitCheckpointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adding a Checkpoint
     * This API is used to add a checkpoint.
     * @param {String} projectId ID of the current Project
     * @param {module:model/CommitCheckpointRequest} commitCheckpointRequest CommitCheckpointRequest
     * @param {module:api/CheckpointApi~commitCheckpointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.commitCheckpoint = function(projectId, commitCheckpointRequest, callback) {
      var postBody = commitCheckpointRequest;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling commitCheckpoint");
      }

      // verify the required parameter 'commitCheckpointRequest' is set
      if (commitCheckpointRequest === undefined || commitCheckpointRequest === null) {
        throw new Error("Missing the required parameter 'commitCheckpointRequest' when calling commitCheckpoint");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['authorization', 'x-sdk-date'];
      var contentTypes = ['application/json; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{project_id}/checkpoints', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCheckpoint operation.
     * @callback module:api/CheckpointApi~deleteCheckpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCheckpointResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deleting A Checkpoint
     * This API is used to delete a checkpoint of records by specified partition and specified DIS stream.
     * @param {String} projectId ID of the current Project
     * @param {String} streamName Name of the DIS stream for which the checkpoints of data records will be listed.
     * @param {String} appName Unique name of the consumer application that will read data from the chosen DIS stream.
     * @param {Object} opts Optional parameters
     * @param {String} opts.partitionId Unique ID of the partition for which the checkpoints of data records will be listed.
     * @param {module:model/String} opts.checkpointType Checkpoint type.
     * @param {module:api/CheckpointApi~deleteCheckpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCheckpointResult}
     */
    this.deleteCheckpoint = function(projectId, streamName, appName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteCheckpoint");
      }

      // verify the required parameter 'streamName' is set
      if (streamName === undefined || streamName === null) {
        throw new Error("Missing the required parameter 'streamName' when calling deleteCheckpoint");
      }

      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling deleteCheckpoint");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'stream_name': streamName,
        'partition_id': opts['partitionId'],
        'app_name': appName,
        'checkpoint_type': opts['checkpointType'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['authorization', 'x-sdk-date'];
      var contentTypes = ['application/json; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = GetCheckpointResult;

      return this.apiClient.callApi(
        '/{project_id}/checkpoints', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCheckpoint operation.
     * @callback module:api/CheckpointApi~getCheckpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCheckpointResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listing Checkpoints
     * This API is used to list checkpoints of records in a chosen partition of a chosen DIS stream.
     * @param {String} projectId ID of the current Project
     * @param {String} streamName Name of the DIS stream for which the checkpoints of data records will be listed.
     * @param {String} partitionId Unique ID of the partition for which the checkpoints of data records will be listed.
     * @param {String} appName Unique name of the consumer application that will read data from the chosen DIS stream.
     * @param {module:model/String} checkpointType Checkpoint type.
     * @param {module:api/CheckpointApi~getCheckpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCheckpointResult}
     */
    this.getCheckpoint = function(projectId, streamName, partitionId, appName, checkpointType, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getCheckpoint");
      }

      // verify the required parameter 'streamName' is set
      if (streamName === undefined || streamName === null) {
        throw new Error("Missing the required parameter 'streamName' when calling getCheckpoint");
      }

      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling getCheckpoint");
      }

      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling getCheckpoint");
      }

      // verify the required parameter 'checkpointType' is set
      if (checkpointType === undefined || checkpointType === null) {
        throw new Error("Missing the required parameter 'checkpointType' when calling getCheckpoint");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'stream_name': streamName,
        'partition_id': partitionId,
        'app_name': appName,
        'checkpoint_type': checkpointType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['authorization', 'x-sdk-date'];
      var contentTypes = ['application/json; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = GetCheckpointResult;

      return this.apiClient.callApi(
        '/{project_id}/checkpoints', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
