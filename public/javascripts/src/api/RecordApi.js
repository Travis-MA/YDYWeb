/**
 * DIS
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetPartitionCursorResult', 'model/GetRecordsResult', 'model/PutRecordsRequest', 'model/PutRecordsResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetPartitionCursorResult'), require('../model/GetRecordsResult'), require('../model/PutRecordsRequest'), require('../model/PutRecordsResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Dis) {
      root.Dis = {};
    }
    root.Dis.RecordApi = factory(root.Dis.ApiClient, root.Dis.GetPartitionCursorResult, root.Dis.GetRecordsResult, root.Dis.PutRecordsRequest, root.Dis.PutRecordsResult);
  }
}(this, function(ApiClient, GetPartitionCursorResult, GetRecordsResult, PutRecordsRequest, PutRecordsResult) {
  'use strict';

  /**
   * Record service.
   * @module api/RecordApi
   * @version 1.3.0
   */

  /**
   * Constructs a new RecordApi. 
   * @alias module:api/RecordApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getCursor operation.
     * @callback module:api/RecordApi~getCursorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPartitionCursorResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Getting a Cursor
     * This API is used to get a cursor. A cursor specifies the partition position from which to start reading data records sequentially.
     * @param {String} projectId ID of the current Project
     * @param {String} streamName Name of the DIS stream from which data will be read continually.
     * @param {String} partitionId ID of the partition to get the cursor for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.cursorType Cursor type.
     * @param {String} opts.startingSequenceNumber Sequence number of the data record in the partition from which to start reading.
     * @param {Object} opts.timestamp 
     * @param {module:api/RecordApi~getCursorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPartitionCursorResult}
     */
    this.getCursor = function(projectId, streamName, partitionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getCursor");
      }

      // verify the required parameter 'streamName' is set
      if (streamName === undefined || streamName === null) {
        throw new Error("Missing the required parameter 'streamName' when calling getCursor");
      }

      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling getCursor");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'stream-name': streamName,
        'partition-id': partitionId,
        'cursor-type': opts['cursorType'],
        'starting-sequence-number': opts['startingSequenceNumber'],
        'timestamp': opts['timestamp'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['authorization', 'x-sdk-date'];
      var contentTypes = ['application/json; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = GetPartitionCursorResult;

      return this.apiClient.callApi(
        '/{project_id}/cursors', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecords operation.
     * @callback module:api/RecordApi~getRecordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecordsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pulling Data from a DIS Stream
     * This API is used to pull data from a DIS stream.
     * @param {String} projectId ID of the current Project
     * @param {String} partitionCursor Cursor, which specifies the position in the partition from which to start reading data records sequentially.
     * @param {module:api/RecordApi~getRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecordsResult}
     */
    this.getRecords = function(projectId, partitionCursor, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getRecords");
      }

      // verify the required parameter 'partitionCursor' is set
      if (partitionCursor === undefined || partitionCursor === null) {
        throw new Error("Missing the required parameter 'partitionCursor' when calling getRecords");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'partition-cursor': partitionCursor,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['authorization', 'x-sdk-date'];
      var contentTypes = ['application/json; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = GetRecordsResult;

      return this.apiClient.callApi(
        '/{project_id}/records', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putRecords operation.
     * @callback module:api/RecordApi~putRecordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutRecordsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Putting Data into a DIS Stream
     * This API is used to put data into DIS streams.
     * @param {String} projectId ID of the current Project
     * @param {module:model/PutRecordsRequest} putRecordsRequest PutRecordsRequest
     * @param {module:api/RecordApi~putRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutRecordsResult}
     */
    this.putRecords = function(projectId, putRecordsRequest, callback) {
      var postBody = putRecordsRequest;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling putRecords");
      }

      // verify the required parameter 'putRecordsRequest' is set
      if (putRecordsRequest === undefined || putRecordsRequest === null) {
        throw new Error("Missing the required parameter 'putRecordsRequest' when calling putRecords");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['authorization', 'x-sdk-date'];
      var contentTypes = ['application/json; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = PutRecordsResult;

      return this.apiClient.callApi(
        '/{project_id}/records', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
