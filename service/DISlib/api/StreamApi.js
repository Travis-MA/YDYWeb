/**
 * DIS
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateStreamReq', 'model/DescribeStreamResult', 'model/ListStreamsResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateStreamReq'), require('../model/DescribeStreamResult'), require('../model/ListStreamsResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Dis) {
      root.Dis = {};
    }
    root.Dis.StreamApi = factory(root.Dis.ApiClient, root.Dis.CreateStreamReq, root.Dis.DescribeStreamResult, root.Dis.ListStreamsResult);
  }
}(this, function(ApiClient, CreateStreamReq, DescribeStreamResult, ListStreamsResult) {
  'use strict';

  /**
   * Stream service.
   * @module api/StreamApi
   * @version 1.3.0
   */

  /**
   * Constructs a new StreamApi. 
   * @alias module:api/StreamApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createStream operation.
     * @callback module:api/StreamApi~createStreamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a DIS Stream
     * Create a new DIS Stream with specific configurations
     * @param {String} projectId ID of the current Project
     * @param {module:model/CreateStreamReq} createStreamReq List of user object
     * @param {module:api/StreamApi~createStreamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createStream = function(projectId, createStreamReq, callback) {
      var postBody = createStreamReq;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createStream");
      }

      // verify the required parameter 'createStreamReq' is set
      if (createStreamReq === undefined || createStreamReq === null) {
        throw new Error("Missing the required parameter 'createStreamReq' when calling createStream");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['authorization', 'x-sdk-date'];
      var contentTypes = ['application/json; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{project_id}/streams', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStream operation.
     * @callback module:api/StreamApi~deleteStreamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deleting a DIS Stream by ID
     * This API is used to delete a DIS stream after pushing or pulling data to or from the stream
     * @param {String} projectId ID of the current Project
     * @param {String} streamName ID of the current Project
     * @param {module:api/StreamApi~deleteStreamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteStream = function(projectId, streamName, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteStream");
      }

      // verify the required parameter 'streamName' is set
      if (streamName === undefined || streamName === null) {
        throw new Error("Missing the required parameter 'streamName' when calling deleteStream");
      }


      var pathParams = {
        'project_id': projectId,
        'stream_name': streamName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['authorization', 'x-sdk-date'];
      var contentTypes = ['application/json; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{project_id}/streams/{stream_name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the describeStream operation.
     * @callback module:api/StreamApi~describeStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeStreamResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Viewing Details of a DIS Stream
     * This API is used to view details of a specified DIS stream.
     * @param {String} projectId ID of the current Project
     * @param {String} streamName ID of the current Project
     * @param {Object} opts Optional parameters
     * @param {String} opts.startPartitionId 
     * @param {Number} opts.limitPartitions 
     * @param {module:api/StreamApi~describeStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeStreamResult}
     */
    this.describeStream = function(projectId, streamName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling describeStream");
      }

      // verify the required parameter 'streamName' is set
      if (streamName === undefined || streamName === null) {
        throw new Error("Missing the required parameter 'streamName' when calling describeStream");
      }


      var pathParams = {
        'project_id': projectId,
        'stream_name': streamName
      };
      var queryParams = {
        'start_partitionId': opts['startPartitionId'],
        'limit_partitions': opts['limitPartitions']
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['authorization', 'x-sdk-date'];
      var contentTypes = ['application/json; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = DescribeStreamResult;

      return this.apiClient.callApi(
        '/{project_id}/streams/{stream_name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listStreams operation.
     * @callback module:api/StreamApi~listStreamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStreamsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listing DIS Streams
     * This API is used to list all the DIS streams created by the current tenant
     * @param {String} projectId ID of the current Project
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of DIS streams to list in a single API call.
     * @param {String} opts.startStreamName Name of the DIS stream to start the list with. The returned stream list does not contain this DIS stream name.
     * @param {module:api/StreamApi~listStreamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStreamsResult}
     */
    this.listStreams = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listStreams");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'limit': opts['limit'],
        'start_stream_name': opts['startStreamName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['authorization', 'x-sdk-date'];
      var contentTypes = ['application/json; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = ListStreamsResult;

      return this.apiClient.callApi(
        '/{project_id}/streams', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
